#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "poly.h"

struct poly *polyCreate()
{
    struct poly *p;
    p=malloc(sizeof(struct poly));
    p->a=malloc(sizeof(double));
    p->a[0]=0.0;
    p->length=1;
    p->size=1;
    return p;
}

struct poly *polyDelete(struct poly *p)
{
    if(p){
        free(p->a);
        free(p);
    }
    p=(void *)0;
    return p;
}

struct poly *polySetCoefficient (struct poly *d, int i, double value){
	if (!d || i < 0) return d;

	if (i >= d->size) {
		do {
			d->size *= 2;
		} while (d->size <= i);
		d->a = realloc(d->a, (d->size)*sizeof(double));
	} 
	while (i >= d->length) {
			d->a[d->length++] = 0;
    }
		d->a[i] = value;
	return d;
}

double polyGetCoefficient(struct poly *p, int i)
{
    if(i>p->length || p==(struct poly *)0) return 0;
    
    return p->a[i];
}

int polyDegree(struct poly *p)
{
    for(int i=p->length; i>=0; i--){
        if(p->a[i]!=0) return i;
    }
    return 0;
}

void polyPrint(struct poly *p)
{  
    int n;
    for(int i=(p->length); i>=0; i--)
    {
        if(p->a[i]){
            n=i+1;
            break;
        }
    }
    
    int j=0;
    for(int i=n-1; i>=0; i--)
    {
        j=i;
        if((p->a[i])!=0)
        {
            if((p->a[i])!=1 && (p->a[i])!=-1)
                printf("%g", p->a[i]);
            if(p->a[i]==-1)
                printf("-");
             
            if(i==0) 
            {
                printf("\n"); 
            } else if(i==1) { 
                printf("x");
            } else {
                printf("x^%d", i);
            }
        break;
        }
    }
     
    if(j==0)
      printf("0\n");
     
    for(int i=j-1; i>=0; i--)
    {
        if(p->a[i]<0) 
        {
            if(p->a[i]!=-1)
            {
                printf(" - %g", (-1)*(p->a[i]));
            } else printf(" - ");
             
            if(i==0)
            {
                if(p->a[i]==(-1))
                {
                    printf("1\n"); 
                } else printf("\n");
            }
            if(i==1)
                printf("x");
            if(i>1)
                printf("x^%d", i);
        }
              
        if((p->a[i])>1) 
        {
             
            printf(" + %g", (p->a[i]));
            if(i==0) 
                printf("\n"); 
            if(i==1)
                printf("x");
            if(i>1)
                printf("x^%d", i);
        }
         
        if((p->a[i])==1)
        {
            printf(" + ", (p->a[i]));
            if(i==0) 
                printf("1\n"); 
            if(i==1)
                printf("x");
            if(i>1)
                printf("x^%d", i);
        }
         
        if((p->a[i]>0) && (p->a[i]<1))
        {
            printf(" + %g", (p->a[i]));
            if(i==0) 
                printf("\n"); 
            if(i==1)
                printf("x");
            if(i>1)
                printf("x^%d", i);
        }
            
        if((p->a[0])==0)
            printf("\n");
    }
}

struct poly *polyCopy(struct poly *p)
{
    struct poly *a = polyCreate();
    for(int i=0; i<=p->length; i++)
            polySetCoefficient(a, i, 0.0);
    for(int i=0; i<=p->length; i++){
            a->a[i]=p->a[i];
    }
    return a;
}

struct poly *polyAdd(struct poly *p0, struct poly *p1)
{
    struct poly *c;
    if(p0->length>p1->length) {
        c = polyCopy(p0);
        for(int i=0; i<=c->length; i++){
            c->a[i]+=p1->a[i];
        }
    } else {
        c = polyCopy(p1);
        for(int i=0; i<=c->length; i++){
            c->a[i]+=p0->a[i];
        }
    }

    return c;
}

struct poly *setToZero(struct poly *p)
{
    for(int i=0; i<=p->length; i++)
        p->a[i]=0.0;
    return p;
}

struct poly *polyMultiply(struct poly *p0, struct poly *p1)
{
    struct poly *c;
    if(p0->length>p1->length) {
        c = polyCopy(p0);
        polySetCoefficient(c, polyDegree(p1)+polyDegree(p0), 0.0);
        setToZero(c);
        for(int i=0; i<=p0->length; i++){
            for(int j=0; j<=p1->length; j++){
                c->a[i+j]+=((p0->a[i])*(p1->a[j]));
            }
        }
    } else {
        c = polyCopy(p1);
        polySetCoefficient(c, polyDegree(p1)+polyDegree(p0), 0.0);
        setToZero(c);
        for(int i=0; i<=p0->length; i++){
            for(int j=0; j<=p1->length; j++){
                c->a[i+j]+=((p0->a[i])*(p1->a[j]));
            }
        }
    }
    return c;
}

struct poly *polyPrime(struct poly *p)
{
    struct poly *d;
    d = polyCopy(p);
    for(int i=0; i<=d->length; i++)
    {
        d->a[i]=(d->a[i+1])*(i+1);
    }
    return d;
}

double polyEval(struct poly *p, double x)
{
    //if(!p) return 0.0;
    //if(x==0.0 || p->length==1) return p->a[0];
    double sum=0.0;
    double temp=0.0;
    for(int i=0; i<p->length; i++)
    {
        temp=((double)(pow(x, i)))*(p->a[i]);
        if(temp==-0) temp=0;
        sum+=temp;
    }
    return sum;
}




